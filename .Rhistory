names(data)[105] <- "UM05_SQ010"
# LimeSurvey Field type: A
data[, 106] <- as.character(data[, 106])
attributes(data)$variable.labels[106] <- "Von der Betreuungseinrichtung (z.B. Kita oder Tagesmutter) meines Kindes wünsche ich mir Folgendes:"
names(data)[106] <- "W01"
# LimeSurvey Field type: A
data[, 107] <- as.character(data[, 107])
attributes(data)$variable.labels[107] <- "Bitte ergänzen Sie: Um mein Kind im Umgang mit Rassismuserfahrungen zu stärken, wünsche ich/brauche ich Folgendes:"
names(data)[107] <- "W02"
# LimeSurvey Field type: A
data[, 108] <- as.character(data[, 108])
attributes(data)$variable.labels[108] <- "Um Geschlechtergerechtigkeit in der Betreuungseinrichtung meines Kindes zu realisieren, sollte Folgendes berücksichtigt werden:"
names(data)[108] <- "W03"
# LimeSurvey Field type: F
data[, 109] <- as.numeric(data[, 109])
attributes(data)$variable.labels[109] <- "Wie alt sind Sie?"
names(data)[109] <- "DD01"
# LimeSurvey Field type: F
data[, 110] <- as.numeric(data[, 110])
attributes(data)$variable.labels[110] <- "[Weiblich] Welchem Geschlecht ordnen Sie sich zu? Bitte kreuzen Sie an. Wenn Sie möchten, können Sie noch etwas in das Kommentarfeld unten eintragen."
data[, 110] <- factor(data[, 110], levels=c(1,0),labels=c("Ja", "Nicht Gewählt"))
names(data)[110] <- "DD02_SQ001"
# LimeSurvey Field type: F
data[, 111] <- as.numeric(data[, 111])
attributes(data)$variable.labels[111] <- "[Männlich] Welchem Geschlecht ordnen Sie sich zu? Bitte kreuzen Sie an. Wenn Sie möchten, können Sie noch etwas in das Kommentarfeld unten eintragen."
data[, 111] <- factor(data[, 111], levels=c(1,0),labels=c("Ja", "Nicht Gewählt"))
names(data)[111] <- "DD02_SQ002"
# LimeSurvey Field type: F
data[, 112] <- as.numeric(data[, 112])
attributes(data)$variable.labels[112] <- "[Divers] Welchem Geschlecht ordnen Sie sich zu? Bitte kreuzen Sie an. Wenn Sie möchten, können Sie noch etwas in das Kommentarfeld unten eintragen."
data[, 112] <- factor(data[, 112], levels=c(1,0),labels=c("Ja", "Nicht Gewählt"))
names(data)[112] <- "DD02_SQ003"
# LimeSurvey Field type: F
data[, 113] <- as.numeric(data[, 113])
attributes(data)$variable.labels[113] <- "[Keine Antwort] Welchem Geschlecht ordnen Sie sich zu? Bitte kreuzen Sie an. Wenn Sie möchten, können Sie noch etwas in das Kommentarfeld unten eintragen."
data[, 113] <- factor(data[, 113], levels=c(1,0),labels=c("Ja", "Nicht Gewählt"))
names(data)[113] <- "DD02_SQ004"
# LimeSurvey Field type: A
data[, 114] <- as.character(data[, 114])
attributes(data)$variable.labels[114] <- "[Sonstiges] Welchem Geschlecht ordnen Sie sich zu? Bitte kreuzen Sie an. Wenn Sie möchten, können Sie noch etwas in das Kommentarfeld unten eintragen."
names(data)[114] <- "DD02_other"
summary(data)
# Create Codebook
summary(data)
install.packages("dataMaid")
library("dataMaid")
makeCodebook(data)
install.packages("codebookr")
install.packages("dplyr")
install.packages("haven")
library("codebookr")
install.packages("codebookr")
install.packages("dplyr")
install.packages("haven")
install.packages("haven")
library("codebookr")
library("dplyr", warn.conflicts = FALSE)
library("haven")
study_codebook <- codebook(data)
# Assuming your dataframe is named your_dataframe
data %>%
summarise(across(ends_with("choice1"), sum, na.rm = TRUE))
# Drop rows where the ID variable is empty
data <- subset(data, !is.na(id) & id != "")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
# Assuming your dataframe is named your_dataframe
data %>%
summarise(across(ends_with("choice1"), sum, na.rm = TRUE))
View(data)
# master script
# load answers
source("C:\Users\Can\Desktop\masterthesis\masterthesis\work\load_answers.R")
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/clean_data.R")
View(data)
# Assuming your dataframe is named data
for (i in 0:6) {
col_name <- paste0("choice", sprintf("%02d", i))
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
View(data)
# Assuming your dataframe is named data
for (i in 1:6) {
col_name <- paste0("choice", sprintf("%02d", i))
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# Assuming your dataframe is named data
for (i in 11:16) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/clean_data.R")
install.packages("tidyverse")
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/clean_data.R")
install.packages("tidyverse")
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/clean_data.R")
View(data)
data <- data %>%
select(-starts_with("g_ug_mp"))
data <- data %>%
select(-starts_with("g_ug_sp"))
View(data)
data <- data %>%
select(-ends_with("player.angle"))
data <- data %>%
select(-ends_with("player.role"))
data <- data %>%
select(-ends_with("player.payoff"))
data <- data %>%
select(-ends_with("player.id_in_subsession"))
data <- data %>%
select(-ends_with("group.id_in_subsession"))
data <- data %>%
select(-ends_with("player.category"))
data <- data %>%
select(-ends_with("player.id_in_group"))
data <- data %>%
select(-ends_with("subsession.round_number"))
data <- data %>%
select(-participant.label)
data <- data %>%
select(-starts_with("session."))
data <- data %>%
select(-participant.label)
data <- data %>%
select(-participant.mturk_worker_id)
data <- data %>%
select(-participant.mturk_assignment_id)
data <- data %>%
select(-participant.payoff)
data <- data %>%
filter(participant.progress == 57)
data <- data %>%
select(-intro.1.player.prolificid)
data <- data %>%
select(-participant.id_in_session)
data <- data %>%
select(-participant.code)
data <- data %>%
select(-participant._index_in_pages)
data <- data %>%
select(-participant._max_page_index)
data <- data %>%
select(-participant._current_app_name)
data <- data %>%
select(-participant._current_page_name)
data <- data %>%
select(-participant.visited)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_sp.1.player.proposer_payoff == 3)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_sp.1.player.responder_payoff == 1)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.responder_payoff == 2)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.proposer1_payoff == 2)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.proposer2_payoff == 2)
data <- data %>%
select(-contact.1.player.email)
data <- data %>%
select(-Total.approvals)
data <- data %>%
select(-Ethnicity.simplified)
data <- data %>%
select(-Country.of.birth)
data <- data %>%
select(-Country.of.residence)
data <- data %>%
select(-Nationality)
data <- data %>%
select(-Language)
data <- data %>%
select(-Student.status)
data <- data %>%
select(-Employment.status)
data <- data %>%
select(-Reviewed.at)
data <- data %>%
select(-Status)
data <- data %>%
select(-Submission.id)
data <- data %>%
select(-Participant.id)
data <- data %>%
select(-Archived.at)
data <- data %>%
select(-Completion.code)
data <- data %>%
select(-c("Completion.code"))
# Drop rows where the ID variable is empty
data <- subset(data, !is.na(id) & id != "")
library(tidyverse)
# Assuming your dataframe is named your_dataframe
data %>%
summarise(across(ends_with("choice1"), sum, na.rm = TRUE))
# cleaning choice0 to choice4
for (i in 0:4) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice00 to choice06
for (i in 0:6) {
col_name <- paste0("choice", sprintf("%02d", i))
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice11 to choice16
for (i in 11:16) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice22 to choice26
for (i in 22:26) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice33 to choice36
for (i in 33:36) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice44 to choice46
for (i in 44:46) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice55 to choice56
for (i in 55:56) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice66 to choice66
for (i in 66:66) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# Merge the two datasets based on the respective columns
data <- merge(answers, demographics,
by.x = "id",
by.y = "id",
all.x = TRUE)
View(data)
# This is code to load the research data from Prolific into R
# Replace the file path with your actual file path
answers_file_path <- "C:/Users/Can/Desktop/masterthesis/masterthesis/data/UG.csv"
# Read the CSV file into a data frame
answers <- read.csv(answers_file_path)
# Print a summary of the data frame
summary(answers)
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/clean_data.R")
# This is code to load the research data from Prolific into R
# Replace the file path with your actual file path
answers_file_path <- "C:/Users/Can/Desktop/masterthesis/masterthesis/data/UG.csv"
# Read the CSV file into a data frame
answers <- read.csv(answers_file_path)
# Print a summary of the data frame
summary(answers)
answers_file_path <- "C:/Users/Can/Desktop/masterthesis/masterthesis/data/UG.csv"
answers <- read.csv(answers_file_path)
setwd("C:/Users/Can/Desktop/masterthesis")
data <- read.csv("data/full_data.csv")
setwd("C:/Users/Can/Desktop/masterthesis")
data <- read.csv("B - data/full_data.csv")
prosocial_data <- subset(data, participant.svo_category == "Prosocial")
data <- prosocial_data # overwrite the df used in the script such that the original code from the full dataset does not have to be changed
# Script to run McNemar-Bowker test of Matrix symmetry on minimum tolerable offer by groups versus minimum tolerable offer by individuals
# generate minimum tolerance variable
data$mintol_go <- ifelse(data$choice00 == 1, 0,
ifelse(data$choice01 == 1 , 0.5,
ifelse(data$choice02 == 1 | data$choice11 == 1, 1,
ifelse(data$choice03 == 1 | data$choice12 == 1, 1.5,
ifelse(data$choice04 == 1 | data$choice13 == 1 | data$choice22 == 1, 2, NA)))))
data$mintol_io <- ifelse(data$choice0 == 1, 0,
ifelse(data$choice1 == 1, 1,
ifelse(data$choice2 == 1, 2, NA)))
table(data$mintol_io)
table(data$mintol_go)
table(data$mintol_go, data$mintol_io)
# get counts of inconsistent observations, where low-offer tolerace is higher for group offers
mcn_data <- as.matrix(table(data$mintol_go, data$mintol_io))
# remove uncomparable observations (those where mto = decimal number)
mcn <- matrix(c(mcn_data[1,1], mcn_data[1,2], mcn_data[1,3],
mcn_data[3,1], mcn_data[3,2], mcn_data[3,3],
mcn_data[5,1], mcn_data[5,2], mcn_data[5,3]), nrow = 3, byrow = TRUE)
mcnemar.test(mcn, correct = FALSE)
# McNemar test for outcome = 0
mcnemar.test(table(
data$choice0,
data$choice00
), correct = FALSE)
mcn
sum(msn)
sum(mcn)
# master script
setwd("C:/Users/Can/Desktop/masterthesis/")
##### load answers #####
answers_file_path <- "B - data/UG.csv"
# Read the CSV file into a data frame
answers <- read.csv(answers_file_path)
##### load demographics #####
demographics_file_path <- "B - data/Demographic_UG_full.csv"
# Read the CSV file into a data frame
demographics <- read.csv(demographics_file_path)
##### merge answers and demographics #####
answers$id <- answers$intro.1.player.prolificid
demographics$id <- demographics$Participant.id
# Merge the two datasets based on the respective columns
data <- merge(answers, demographics,
by.x = "id",
by.y = "id",
all.x = TRUE)
##### clean dataset #####
# Drop rows where the ID variable is empty
data <- subset(data, !is.na(id) & id != "")
library(tidyverse)
# Assuming your dataframe is named your_dataframe
data %>%
summarise(across(ends_with("choice1"), sum, na.rm = TRUE))
# cleaning choice0 to choice4
for (i in 0:4) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice00 to choice06
for (i in 0:6) {
col_name <- paste0("choice", sprintf("%02d", i))
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice11 to choice16
for (i in 11:16) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice22 to choice26
for (i in 22:26) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice33 to choice36
for (i in 33:36) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice44 to choice46
for (i in 44:46) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice55 to choice56
for (i in 55:56) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice66 to choice66
for (i in 66:66) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# drop variables that are unnecessary
data <- data %>%
select(-starts_with("g_ug_mp"))
data <- data %>%
select(-starts_with("g_ug_sp"))
data <- data %>%
select(-starts_with("session."))
data <- data %>%
select(-ends_with("player.angle"))
data <- data %>%
select(-ends_with("player.role"))
data <- data %>%
select(-ends_with("player.payoff"))
data <- data %>%
select(-ends_with("player.category"))
data <- data %>%
select(-ends_with("player.id_in_group"))
data <- data %>%
select(-ends_with("group.id_in_subsession"))
data <- data %>%
select(-ends_with("subsession.round_number"))
data <- data %>%
select(-c(
"Completion.code",
"Archived.at",
"Participant.id",
"Submission.id",
"Status",
"Reviewed.at",
"Employment.status",
"Student.status",
"Language",
"Nationality",
"Country.of.residence",
"Country.of.birth",
"Ethnicity.simplified",
"Total.approvals",
"contact.1.player.email",
"participant.visited",
"participant._current_page_name",
"participant._current_app_name",
"participant._max_page_index",
"participant._index_in_pages",
"participant.code",
"participant.id_in_session",
"intro.1.player.prolificid",
"participant.payoff",
"participant.mturk_assignment_id",
"participant.mturk_worker_id",
"participant.label"
))
# Filter out people who did not finish
data <- data %>%
filter(participant.progress == 57)
# clean data where consent was revoked
data <- data %>%
mutate_all(~ ifelse(. == "CONSENT_REVOKED", NA, .))
# clean data that expired
data <- data %>%
mutate_all(~ ifelse(. == "DATA_EXPIRED", NA, .))
# format Age as numeric
data$Age <- as.numeric(data$Age)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_sp.1.player.proposer_payoff == 3)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_sp.1.player.responder_payoff == 1)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.responder_payoff == 2)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.proposer1_payoff == 2)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.proposer2_payoff == 2)
##### export data #####
prosocial_data <- subset(data, participant.svo_category == "Prosocial")
# save prepared dataset
write.csv(data, "B - data/full_data.csv", row.names = FALSE)
write.csv(prosocial_data, "B - data/prosocial_data.csv", row.names = FALSE)
