# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
data <- data %>%
select(-c("Completion.code", "Archived.at"))
library(tidyverse)
data <- data %>%
select(-c("Completion.code", "Archived.at"))
# This is code to load the research data from Prolific into R
# Replace the file path with your actual file path
answers_file_path <- "C:/Users/Can/Desktop/masterthesis/masterthesis/data/UG.csv"
# Read the CSV file into a data frame
answers <- read.csv(answers_file_path)
# Print a summary of the data frame
summary(answers)
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# This is code to clean the dataset
# Drop rows where the ID variable is empty
data <- subset(data, !is.na(id) & id != "")
library(tidyverse)
# Assuming your dataframe is named your_dataframe
data %>%
summarise(across(ends_with("choice1"), sum, na.rm = TRUE))
# cleaning choice0 to choice4
for (i in 0:4) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice00 to choice06
for (i in 0:6) {
col_name <- paste0("choice", sprintf("%02d", i))
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice11 to choice16
for (i in 11:16) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice22 to choice26
for (i in 22:26) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice33 to choice36
for (i in 33:36) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice44 to choice46
for (i in 44:46) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice55 to choice56
for (i in 55:56) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# cleaning choice66 to choice66
for (i in 66:66) {
col_name <- paste0("choice", i)
data <- data %>%
mutate(!!col_name := rowSums(select(., ends_with(col_name)), na.rm = TRUE))
}
# drop variables that are unnecessary
data <- data %>%
select(-starts_with("g_ug_mp"))
data <- data %>%
select(-starts_with("g_ug_sp"))
data <- data %>%
select(-starts_with("session."))
data <- data %>%
select(-ends_with("player.angle"))
data <- data %>%
select(-ends_with("player.role"))
data <- data %>%
select(-ends_with("player.payoff"))
data <- data %>%
select(-ends_with("player.category"))
data <- data %>%
select(-ends_with("player.id_in_group"))
data <- data %>%
select(-ends_with("group.id_in_subsession"))
data <- data %>%
select(-ends_with("subsession.round_number"))
data <- data %>%
select(-c(
"Completion.code",
"Archived.at",
"Participant.id",
"Submission.id",
"Status",
"Reviewed.at",
"Employment.status",
"Student.status",
"Language",
"Nationality",
"Country.of.residence",
"Country.of.birth",
"Ethnicity.simplified",
"Total.approvals",
"contact.1.player.email",
"participant.visited",
"participant._current_page_name",
"participant._current_app_name",
"participant._max_page_index",
"participant._index_in_pages",
"participant.code",
"participant.id_in_session",
"intro.1.player.prolificid",
"participant.payoff",
"participant.mturk_assignment_id",
"participant.mturk_worker_id",
"participant.label"
))
# Filter out people who did not finish
data <- data %>%
filter(participant.progress == 57)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_sp.1.player.proposer_payoff == 3)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_sp.1.player.responder_payoff == 1)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.responder_payoff == 2)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.proposer1_payoff == 2)
# Filter out people who failed the test rounds
data <- data %>%
filter(ac_ug_mp.1.player.proposer2_payoff == 2)
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/clean_data.R")
write.csv(data, "C:/Users/Can/Desktop/masterthesis/masterthesis/data/data.csv", row.names = TRUE)
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/clean_data.R")
# master script
# load answers
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/load_answers.R")
# load demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/load_demographics.R")
# merge answers and demographics
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/merge_data.R")
# clean dataset
source("C:/Users/Can/Desktop/masterthesis/masterthesis/work/prep/clean_data.R")
# Assuming your dataframe is named data
library(ggplot2)
# Select columns containing "choice" in their name
choice_columns <- select(data, contains("choice"))
# Calculate the correlation matrix
cor_matrix <- cor(choice_columns)
# Create a heatmap
ggplot(data = as.data.frame(cor_matrix), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Variables containing 'choice'")
# Assuming your dataframe is named data
library(ggplot2)
# Select columns containing "choice" in their name
choice_columns <- select(data, contains("choice"))
# Calculate the correlation matrix
cor_matrix <- cor(choice_columns)
# Convert correlation matrix to a data frame with row and column names
cor_df <- as.data.frame(as.table(cor_matrix))
# Create a heatmap
ggplot(data = cor_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Variables containing 'choice'")
# Assuming your dataframe is named data
library(ggplot2)
# Select columns starting with "choice" and not ending with "choice"
choice_columns <- select(data, matches("^choice[^0-9]"))
# Calculate the correlation matrix
cor_matrix <- cor(choice_columns)
# Convert correlation matrix to a data frame with row and column names
cor_df <- as.data.frame(as.table(cor_matrix))
# Create a heatmap
ggplot(data = cor_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Variables starting with 'choice'")
# Assuming your dataframe is named data
library(ggplot2)
# Select columns starting with "choice" and not ending with "choice"
choice_columns <- select(data, matches("^choice[^0-9]"))
# Calculate the correlation matrix
cor_matrix <- cor(choice_columns)
# Convert correlation matrix to a data frame with row and column names
cor_df <- as.data.frame(as.table(cor_matrix))
# Create a heatmap
ggplot(data = cor_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Variables starting with 'choice'")
# Assuming your dataframe is named data
library(ggplot2)
# Select columns containing "choice" in their name
choice_columns <- select(data, starts_with("choice"))
# Calculate the correlation matrix
cor_matrix <- cor(choice_columns)
# Convert correlation matrix to a data frame with row and column names
cor_df <- as.data.frame(as.table(cor_matrix))
# Create a heatmap
ggplot(data = cor_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Variables containing 'choice'")
View(cor_df)
View(cor_matrix)
View(cor_matrix)
cor(choice_columns)
View(choice_columns)
table(data$choice1, data$choice01)
table(data$choice1, data$choice02)
View(data)
table(data$participant.svo_category, data$choice02)
ggplot(data = data, aes(x = participant.svo_category, y = choice02, fill = count)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap of Frequencies") +
theme_minimal()
ggplot(data = data, aes(x = participant.svo_category, y = choice02, fill = count)) +
geom_point() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap of Frequencies") +
theme_minimal()
ggplot(data = data, aes(x = participant.svo_category, y = choice02)) +
geom_point() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap of Frequencies") +
theme_minimal()
ggplot(data = data, aes(x = participant.svo_category, y = choice02, size = count)) +
geom_point() +
labs(title = "Scatterplot with Size by Frequency") +
theme_minimal()
ggplot(data = data, aes(x = data$participant.svo_category, y = data$choice02, size = count)) +
geom_point() +
labs(title = "Scatterplot with Size by Frequency") +
theme_minimal()
ggplot(data = data, aes(x = data$participant.svo_category, y = data$choice02)) +
geom_point() +
labs(title = "Scatterplot with Size by Frequency") +
theme_minimal()
ggplot(data = data, aes(x = data$participant.svo_category, y = data$choice02, size = frequency)) +
geom_point() +
labs(title = "Scatterplot with Size by Frequency") +
theme_minimal()
ggplot(data = data, aes(x = participant.svo_category, y = choice02)) +
geom_point() +
labs(title = "Scatterplot with Size by Frequency") +
theme_minimal()
ggplot(data, aes(fill=participant.svo_category, y=choice02, x=choice1)) +
geom_bar(position="dodge", stat="identity")
ggplot(data = data, aes(fill = participant.svo_category, y = choice02, x = choice1)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Bar Plot of Frequencies") +
theme_minimal()
table(data$participant.svo_category, data$choice11)
table(data$participant.svo_category, data$choice02)
table(data$choice1, data$choice02)
table(data$choice1, data$choice11)
table(data$choice2, data$choice04)
table(data$choice2, data$choice13)
table(data$choice2, data$choice22)
table(data$choice1, data$choice02)
table(data$choice1, data$choice11)
table(data$choice3, data$choice06)
table(data$choice3, data$choice15)
table(data$choice3, data$choice24)
table(data$choice3, data$choice33)
table(data$choice2, data$choice04)
table(data$choice2, data$choice13)
table(data$choice2, data$choice22)
table(data$choice1, data$choice02)
table(data$choice1, data$choice11)
table(data$choice1, data$choice02)
table(data$choice1, data$choice11)
table(data$choice1, data$choice02)
table(data$choice1, data$choice11)
table(data$choice2, data$choice04)
table(data$choice2, data$choice13)
table(data$choice2, data$choice22)
table(data$choice3, data$choice06)
table(data$choice3, data$choice15)
table(data$choice3, data$choice24)
table(data$choice3, data$choice33)
prosocial_data <- subset(data, participant.svo_angle == "Prosocial")
prosocial_data <- subset(data, participant.svo_angle == "prosocial")
prosocial_data <- subset(data, participant.svo_angle == "Prosocial")
prosocial_data <- subset(data, participant.svo_category == "Prosocial")
table(prosocial_data$choice1, data$choice02)
table(prosocial_data$choice1, prosocial_data$choice02)
table(prosocial_data$choice1, prosocial_data$choice11)
table(data$choice1, data$choice02)
table(prosocial_data$choice1, prosocial_data$choice02)
table(data$choice1, data$choice11)
table(prosocial_data$choice1, prosocial_data$choice11)
table(data$choice2, data$choice04)
table(prosocial_data$choice2, prosocial_data$choice04)
table(data$choice2, data$choice13)
table(prosocial_data$choice2, prosocial_data$choice13)
table(data$choice2, data$choice22)
table(prosocial_data$choice2, prosocial_data$choice22)
